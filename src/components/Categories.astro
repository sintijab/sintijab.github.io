---
import { EN_COLLECTION, getIndexCollection } from '../consts';
const { categories, subcategories, collection, category } = Astro.props;
const { pathname, origin } = Astro.url;
const [lang, ...slug] = pathname.split('/').filter(e => e) || EN_COLLECTION;
const formattedPathname = slug[0].replace(/-/g, ' ');
let mainCategory = collection.includes(`/`) ? collection : `/${collection}`;
const index = await getIndexCollection(lang);
const { categories: categoriesLabel, moreCategories } = index?.[0].data;


---
<button id="toggle-categories" class="btn categories-btn">
  <svg class="svg"style="font-size:14px; width: 2em; height: 2em; padding-right: .5rem;" viewBox="0 0 1020 1020"><path d="M602.763636 512L442.181818 351.418182c-13.963636-13.963636-13.963636-34.909091 0-48.872727 13.963636-13.963636 34.909091-13.963636 48.872727 0l186.181819 186.181818c13.963636 13.963636 13.963636 34.909091 0 48.872727l-186.181819 186.181818c-13.963636 13.963636-34.909091 13.963636-48.872727 0-13.963636-13.963636-13.963636-34.909091 0-48.872727l160.581818-162.909091zM512 1024C228.072727 1024 0 795.927273 0 512S228.072727 0 512 0s512 228.072727 512 512-228.072727 512-512 512z m0-46.545455c256 0 465.454545-209.454545 465.454545-465.454545S768 46.545455 512 46.545455 46.545455 256 46.545455 512s209.454545 465.454545 465.454545 465.454545z" fill="rgb(229, 56, 242)" /></svg>
  <span>{categoriesLabel}</span>
</button>
<div class="categories" id="categories">
  {
    categories.map((cat) => {
      let formatted = cat.toLowerCase();
      formatted = formatted.includes(`/`) ? formatted : `/${formatted}`;
      const url = formattedPathname.includes(cat) ? `${origin}/${lang}${mainCategory}` : `/${lang}${mainCategory}${formatted.replace(/ +/g, '-')}`;
      return (
        <div id="category-item-wrapper" class="category-wrapper">
          <a id="category-item" class={`category ${cat === category ? "active" : ""}`} href={url}>
            {cat}
          </a>
        </div>
      )})
  }
  <button id="toggle-subcategories" class="btn">
    <svg class="svg"style="font-size:14px; width: 2em; height: 2em; padding-right: .5rem;" viewBox="0 0 1020 1020"><path d="M602.763636 512L442.181818 351.418182c-13.963636-13.963636-13.963636-34.909091 0-48.872727 13.963636-13.963636 34.909091-13.963636 48.872727 0l186.181819 186.181818c13.963636 13.963636 13.963636 34.909091 0 48.872727l-186.181819 186.181818c-13.963636 13.963636-34.909091 13.963636-48.872727 0-13.963636-13.963636-13.963636-34.909091 0-48.872727l160.581818-162.909091zM512 1024C228.072727 1024 0 795.927273 0 512S228.072727 0 512 0s512 228.072727 512 512-228.072727 512-512 512z m0-46.545455c256 0 465.454545-209.454545 465.454545-465.454545S768 46.545455 512 46.545455 46.545455 256 46.545455 512s209.454545 465.454545 465.454545 465.454545z" fill="rgb(229, 56, 242)" /></svg>
    <span>{moreCategories}</span>
  </button>
</div>
{category && (subcategories.includes(category) || categories.includes(category)) && (
  <div id="subcategory-item-wrapper" class="category-wrapper">
    <a id="subcategory-item" class={`category subcategory active active-subitem`} href={`${origin}/${lang}${mainCategory}`}>
      {category}
    </a>
  </div>
)}
<div id="subcategories" class="categories subcategories">
  {
    [...new Set(subcategories)].map((cat) => {
      let formatted = (cat as string).toLowerCase();
      formatted = formatted.includes(`/`) ? formatted : `/${formatted}`;
      const url = formattedPathname.includes(cat as string) ? `${origin}/${lang}${mainCategory}` : `/${lang}${mainCategory}${formatted.replace(/ +/g, '-')}`;
      return (
        <div id="subcategory-item-wrapper" class="category-wrapper">
          <a id="subcategory-item" class={`category subcategory ${cat === category ? "active" : ""}`} href={url}>
            {cat}
          </a>
        </div>
      )})
  }
</div>
<style>
  .category-wrapper {
    border: 3px solid #fff;
    display: flex;
    align-items: center;
    height: 45px;
  }
  .categories {
    padding: .5em 0 0;
    display: none;
    flex-wrap: wrap;
  }
  .subcategories {
    display: none;
    padding: 0.5rem 0 0;
  }
  .subcategories > .category-wrapper {
    height: 50px;
  }
  .category {
    display: flex;
    align-items: center;
    text-decoration: none;
    color: rgb(var(--black));
    line-height: 2;
    font-size: 14px;
    font-weight: 800;
    font-family: 'Raleway Variable', 'Poppins', sans-serif;
    padding: .4rem;
    margin: 0;
    border: 1px solid rgba(99,99,99,0.2);
    border-radius: 25px;
    height: 30px;
  }
  .category:hover {
    border: 2px solid rgb(229, 56, 242);
  }
  .active {
    border: 3px solid rgb(229, 56, 242);
    color: rgb(229, 56, 242);
  }
  .active-subitem {
    border-width: 2px;
  }
  .active-subitem:hover {
    border-width: 3px;
  }
  .active:after {
    content: '\2715';
    font-style: normal;
    font-weight: normal;
    text-decoration: inherit;
    margin-left:5px;
    color:rgb(229, 56, 242);
    font-size: 21px;
    padding-left: 0.3rem;
}
  .btn {
    display: flex;
    align-items: center;
    border: none;
    padding: .5em;
    font-family: 'Raleway Variable', 'Poppins', sans-serif;
    font-size: 16px;
    font-weight: 500;
    background: transparent;
    cursor: pointer;
    color: rgb(229, 56, 242);
  }
  .categories-btn {
    padding: 2.5em 0 .5rem .5rem;
    display: flex;
  }
  .btn:hover {
    text-decoration: underline;
  }
  .display {
    display: flex!important;
  }
  .subcategory {
    padding: .4rem .7rem;
  }
  @media (min-width: 783px) {
    .categories {
      padding: 2em 0 0;
    }
    .subcategories {
      display: none;
      padding: .5em 0 0;
    }
  }
  @media (min-width: 1080px) {
    .category {
      padding: 0.6rem 0.8rem;
      margin: 3px;
    }
    .category-wrapper {
      height: 60px;
    }
  }
</style>
<script>

  const subcategoriesBtn = document.getElementById('toggle-subcategories');
  const subcategories = document.getElementById('subcategories');

  const categoriesBtn = document.getElementById('toggle-categories');
  const categoriesWrapper = document.getElementById('categories');
  categoriesBtn?.addEventListener('click', () => categoriesWrapper?.classList.toggle("display"));
  subcategoriesBtn?.addEventListener('click', () => subcategories?.classList.toggle("display"));

</script>