---
import { getCollection } from 'astro:content';
import FormattedDate from './FormattedDate.astro';
import Categories from './Categories.astro';

const { collection, category } = Astro.props;

let posts = (await getCollection(collection)).sort(
	(a, b) => new Date(b.data.pubDate).valueOf() - new Date(a.data.pubDate).valueOf()
);
const categories = posts.map((post) => {
    let cat = post.data.categories.split(',');
    return cat.filter(item => item !== post.collection);
  }).flat();
const uniqueCategories = [...new Set(categories)].map((item) => {const formatted = (item as string).toLowerCase(); return formatted.trim()});
const formatted = category && category?.replace(/-/g, ' ');

const subcategories = posts.map((post) => {
    let cat = post.data.subcategories.split(',');
    return cat.filter(item => item !== post.collection);
  }).flat();
const uniqueSubCategories = [...new Set(subcategories)].map((item) => {const formatted = (item as string).toLowerCase(); return formatted.trim()});
---
<div>
  {categories && <Categories categories={uniqueCategories} subcategories={uniqueSubCategories} collection={collection} category={formatted} />}
  <ul>
    {
      posts.map((post) => {
        const categories = post.data.categories.toLowerCase();
        const subCategories = post.data.subcategories.toLowerCase();
        if (categories.includes(formatted) || subCategories.includes(formatted) || !category) {
          return (
            <li>
              <a href={`/${collection}/${post.slug}/`}>
                <label class="label">{collection}</label>
                <div class="story-wrapper">
                  <h4 class="title">{post.data.description}</h4>
                  <p class="date">
                    <FormattedDate date={new Date(post.data.pubDate)} />
                  </p>
                </div>
                <img class="article-preview" width={720} height={360} src={post.data.heroImage} alt="" />
              </a>
            </li>
          )
        }})
    }
  </ul>
</div>
<style>
  ul {
    display: flex;
    flex-direction: column;
    flex-wrap: wrap;
    align-items: flex-start;
    gap: 2rem;
    list-style-type: none;
    margin: 2em 0 0;
    padding: 0;
  }
  ul li {
    padding: .5em;
    border-top: 1px solid rgba(99, 99, 99, 0.2);
    box-sizing: fit-content;
  }
  ul li * {
    text-decoration: none;
    transition: 0.2s ease;
  }
  /* ul li:first-child .title {
    font-size: 1.869rem;
    font-family: 'Cabin', 'Poppins', sans-serif;
  } */
  ul li img {
    border-radius: 5px;
    max-height: 200px;
    height: 200px;
    object-fit: cover;
  }
  ul li a {
    display: flex;
    flex-wrap: wrap;
  }
  .title {
    margin: 0;
    color: rgb(var(--black));
    line-height: 1.2;
    font-size: 18px;
    font-family: 'Cabin', 'Poppins', sans-serif;
  }
  .label, .date {
    color: rgb(var(--black));
    line-height: 2;
    font-size: 14px;
    font-weight: 800;
    font-family: 'Raleway', 'Poppins', sans-serif;
    width: 100%;
  }
  .date {
    margin: 0;
    color: rgb(var(--gray));
  }
  ul li:hover {
    box-shadow: rgba(0, 0, 0, 0.15) 0px 5px 15px 0px;
    border-radius: 15px;
  }
  .article-preview {
    max-width: 250px;
    width: 100%;
    height: 100%;
  }
  .story-wrapper {
    display: flex;
    flex-direction: column;
    padding: 0 .8rem 0 0;
  }
  @media (min-width: 1080px) {
    ul {
      flex-direction: row;
    }
    ul li {
      width: calc(47% - 1rem);
      flex: 1 1 calc(47% - 1rem);
      height: 230px;
    }
    .story-wrapper {
      flex-wrap: wrap;
      flex: 1;
    }
  }
</style>
